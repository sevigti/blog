[
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "To be started soon."
  },
  {
    "objectID": "projects.html#soon",
    "href": "projects.html#soon",
    "title": "Projects",
    "section": "",
    "text": "To be started soon."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "blog",
    "section": "",
    "text": "01 Intro to Machine Learning\n\n\n\n\n\n\n\nfastai_course\n\n\nchapter_1\n\n\nML\n\n\n\n\nBuild an image recognizer\n\n\n\n\n\n\nOct 23, 2024\n\n\nvisi\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hello, I’m Elvis. I’m a full-stack developer who enjoys learning new things and building web apps."
  },
  {
    "objectID": "posts/01_intro/index.html#understanding-dataloaders",
    "href": "posts/01_intro/index.html#understanding-dataloaders",
    "title": "01 Intro to Machine Learning",
    "section": "Understanding DataLoaders",
    "text": "Understanding DataLoaders\nTo train a model, we’ll need DataLoaders, which is an object that contains:\nA training set (the images used to create the model) A validation set (the images used to check the accuracy of a model)\n\nWhat goes into the DataLoaders object?\nOut of hundreds of projects, what are all the things that change from project to project to get the data in the right shape? We can split it down into these components:\n\nInput and Output Types\n\nInput: Images\nOutput: Categories (car, bicycle, electric scooter)\n\nGetting Items (get_items)\n\nGets all image files from the specified path\nRuns the get_image_files function\nReturns a list of all image files in a path\nLooks through directories recursively\n\nData Splitting (splitter)\n\nSplits the data into training and validation sets randomly\nUses 20% of the data for the validation set\n\nLabeling (get_y=parent_label)\n\nUses the parent folder name as the category label\nExample:\n\ncar_bicycle_or_scooter/car/image1.jpg → label is “car” car_bicycle_or_scooter/bicycle/image2.jpg → label is “bicycle”\nImage Preprocessing\n\nBefore training, resize each image to 192x192 pixels\nUses “squish” method (as opposed to cropping)\n‘squish’ method maintains aspect ratio\n\nDataLoader Creation\n\ndataloaders(path, bs=32)\nCreates train and validation dataloaders\nbs=32 means batch size of 32 images\n\n\n\n\nCode\ndls = DataBlock(\n    blocks=(ImageBlock, CategoryBlock), \n    get_items=get_image_files, \n    splitter=RandomSplitter(valid_pct=0.2, seed=42),\n    get_y=parent_label,\n    # car_bicycle_or_scooter/car/image1.jpg → label is \"car\"\n    # car_bicycle_or_scooter/bicycle/image2.jpg → label is \"bicycle\"\n    item_tfms=[Resize(192, method='squish')]\n).dataloaders(path, bs=32) \n\ndls.show_batch(max_n=6) # shows 6 images from a batch, displays both images and their labels\n\n\n\n\n\nNow we’re ready to train our model. The fastest widely used computer vision model is resnet18. You can train this in a few minutes,even on a CPU! (On a GPU, it generally takes under 10 seconds…)fastai comes with a helpful fine_tune() method which automatically uses best practices for fine tuning a pre-trained model, sowe’ll use that.\n\n\nCode\n# Create a vison learner using the DataLoaders we created above, resNet18 pre-trained model, and a metrics to measure the error rate.\nlearn = vision_learner(dls, resnet18, metrics=error_rate)\nlearn.fine_tune(3)\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.668419\n0.081710\n0.025210\n00:03\n\n\n\n\n\n\n\n\n\n\n\n\nepoch\ntrain_loss\nvalid_loss\nerror_rate\ntime\n\n\n\n\n0\n0.067997\n0.040579\n0.004202\n00:03\n\n\n1\n0.035534\n0.002521\n0.000000\n00:03\n\n\n2\n0.026271\n0.001035\n0.000000\n00:03"
  },
  {
    "objectID": "posts/01_intro/index.html#understanding-error-rate-vs-loss",
    "href": "posts/01_intro/index.html#understanding-error-rate-vs-loss",
    "title": "01 Intro to Machine Learning",
    "section": "Understanding Error Rate vs Loss",
    "text": "Understanding Error Rate vs Loss\n\nError rate is binary (right or wrong prediction)\nLoss measures the model’s confidence/uncertainty\nExample:\nPrediction 1: Car (60% confident) ✓ Correct\nPrediction 2: Car (95% confident) ✓ Still Correct\nBoth have same error rate (0% - both correct)\nBut second prediction has lower loss (more confident)\n\n\nLoss Improvement Analysis\n\nModel is getting more confident in its correct predictions\nLess uncertainty in its decisions\nBetter internal representations of features"
  },
  {
    "objectID": "posts/01_intro/index.html#training-evolution---better-internal-representation-of-features-example",
    "href": "posts/01_intro/index.html#training-evolution---better-internal-representation-of-features-example",
    "title": "01 Intro to Machine Learning",
    "section": "Training Evolution - better internal representation of features example",
    "text": "Training Evolution - better internal representation of features example\nEarly training:\n“This is a car because it has wheels” (less confident, higher loss)\nLater training:\n“This is a car because it has wheels, specific body shape, headlights, and typical car proportions” (more confident, lower loss)\nChanges in loss don’t affect actual right/wrong decisions (error rate)"
  }
]